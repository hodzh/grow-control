// This file is generated by arduino-gen.ts

#pragma once

#include "Config.h"

// length 1 bytes
struct Empty {
    uint8_t fake;
};
// length 3 bytes
struct DayTime {
    uint8_t hour;
    uint8_t minute;
    uint8_t second;
};
// length 4 bytes
struct DateDay {
    uint8_t wday;
    uint8_t day;
    uint8_t month;
    uint8_t year;
};
// length 8 bytes
struct Program {
    uint8_t valves[3];
    uint8_t compote;
    DateDay start;
};
// length 14 bytes
struct CompoteDaily {
    uint8_t days;
    uint8_t schedule;
    uint16_t volume;
    uint16_t washVolume;
    uint16_t dose[4];
};
// length 196 bytes
struct Compote {
    CompoteDaily daily[14];
};
// length 8 bytes
struct Schedule {
    uint8_t enable;
    uint8_t deviceId;
    DayTime startTime;
    DayTime endTime;
};
// length 6 bytes
struct Timer {
    uint8_t enable;
    uint8_t program;
    uint8_t weekDays;
    DayTime time;
};
// length 9 bytes
struct Pump {
    uint16_t minFlow;
    uint16_t startingTime;
    uint16_t pwmFlow;
    uint8_t pwm;
    uint16_t rate;
};
// length 1 bytes
struct LevelSensor {
    uint8_t beepSeconds;
};
// length 7 bytes
struct Mixer {
    uint16_t seconds;
    uint16_t washSeconds;
    uint16_t pwmSensor;
    uint8_t pwm;
};
// length 9 bytes
struct Dose {
    uint32_t rate;
    uint16_t seconds;
    uint16_t pwmSensor;
    uint8_t pwm;
};
// length 7 bytes
struct DateTime {
    uint8_t second;
    uint8_t minute;
    uint8_t hour;
    uint8_t wday;
    uint8_t day;
    uint8_t month;
    uint8_t year;
};
// length 11 bytes
struct DeviceStatus {
    uint8_t state;
    uint8_t cmdState;
    uint8_t valve;
    uint16_t flow;
    uint16_t volume;
    uint16_t totalVolume;
    uint16_t mix;
};
// length 567 bytes
struct Settings {
    Program program[4];
    Compote compote[2];
    Schedule schedule[4];
    Timer timer[8];
    Pump pump[2];
    LevelSensor levelSensor[2];
    Mixer mixer[1];
    Dose dose[4];
};
// length 39 bytes
struct PinAssignment {
    uint8_t pump[2];
    uint8_t flowSensor[2];
    uint8_t levelSensor[2];
    uint8_t mixer[1];
    uint8_t dose[4];
    uint8_t doseMixer[4];
    uint8_t valve[24];
};
// length 1 bytes
struct ResponseCommandSuccess {
    uint8_t code;
};
// length 1 bytes
struct ResponseLog {
    uint8_t code;
};
// length 11 bytes
struct ResponseStatus {
    uint8_t state;
    uint8_t cmdState;
    uint8_t valve;
    uint16_t flow;
    uint16_t volume;
    uint16_t totalVolume;
    uint16_t mix;
};
// length 1 bytes
struct ResponseError {
    uint8_t code;
};
// length 9 bytes
struct ResponseProgram {
    uint8_t index;
    Program value;
};
// length 16 bytes
struct ResponseCompoteDaily {
    uint8_t index;
    uint8_t dailyIndex;
    CompoteDaily value;
};
// length 9 bytes
struct ResponseSchedule {
    uint8_t index;
    Schedule value;
};
// length 7 bytes
struct ResponseTimer {
    uint8_t index;
    Timer value;
};
// length 10 bytes
struct ResponsePump {
    uint8_t index;
    Pump value;
};
// length 8 bytes
struct ResponseMixer {
    uint8_t index;
    Mixer value;
};
// length 10 bytes
struct ResponseDose {
    uint8_t index;
    Dose value;
};
// length 2 bytes
struct ResponsePinPump {
    uint8_t index;
    uint8_t value;
};
// length 2 bytes
struct ResponsePinFlowSensor {
    uint8_t index;
    uint8_t value;
};
// length 2 bytes
struct ResponsePinLevelSensor {
    uint8_t index;
    uint8_t value;
};
// length 2 bytes
struct ResponsePinMixer {
    uint8_t index;
    uint8_t value;
};
// length 2 bytes
struct ResponsePinDose {
    uint8_t index;
    uint8_t value;
};
// length 2 bytes
struct ResponsePinDoseMixer {
    uint8_t index;
    uint8_t value;
};
// length 2 bytes
struct ResponsePinValve {
    uint8_t index;
    uint8_t value;
};
// length 7 bytes
struct ResponseTime {
    uint8_t second;
    uint8_t minute;
    uint8_t hour;
    uint8_t wday;
    uint8_t day;
    uint8_t month;
    uint8_t year;
};
// length 2 bytes
struct ResponseTemp {
    uint16_t value;
};
// length 1 bytes
struct ResponseStatePump {
    uint8_t value;
};
// length 1 bytes
struct ResponseStateValve {
    uint8_t value;
};
// length 1 bytes
struct ResponseStateMixer {
    uint8_t value;
};
// length 1 bytes
struct ResponseStateDose {
    uint8_t value;
};
// length 1 bytes
struct ResponseStateDoseMixer {
    uint8_t value;
};
// length 1 bytes
struct RequestFertigate {
    uint8_t programId;
};
// length 1 bytes
struct RequestIrrigate {
    uint8_t programId;
};
// length 1 bytes
struct RequestWash {
    uint8_t programId;
};
// length 1 bytes
struct RequestPumpIn {
    uint8_t programId;
};
// length 1 bytes
struct RequestCompote {
    uint8_t programId;
};
// length 1 bytes
struct RequestWashCompote {
    uint8_t programId;
};
// length 1 bytes
struct RequestMix {
    uint8_t mixerId;
};
// length 1 bytes
struct RequestMixDose {
    uint8_t mixerId;
};
// length 2 bytes
struct RequestDose {
    uint8_t programId;
    uint8_t doseId;
};
// length 1 bytes
struct RequestGetProgram {
    uint8_t index;
};
// length 9 bytes
struct RequestSetProgram {
    uint8_t index;
    Program value;
};
// length 2 bytes
struct RequestGetCompoteDaily {
    uint8_t index;
    uint8_t dailyIndex;
};
// length 16 bytes
struct RequestSetCompoteDaily {
    uint8_t index;
    uint8_t dailyIndex;
    CompoteDaily value;
};
// length 1 bytes
struct RequestGetSchedule {
    uint8_t index;
};
// length 9 bytes
struct RequestSetSchedule {
    uint8_t index;
    Schedule value;
};
// length 1 bytes
struct RequestGetTimer {
    uint8_t index;
};
// length 7 bytes
struct RequestSetTimer {
    uint8_t index;
    Timer value;
};
// length 1 bytes
struct RequestGetPump {
    uint8_t index;
};
// length 10 bytes
struct RequestSetPump {
    uint8_t index;
    Pump value;
};
// length 1 bytes
struct RequestGetMixer {
    uint8_t index;
};
// length 8 bytes
struct RequestSetMixer {
    uint8_t index;
    Mixer value;
};
// length 1 bytes
struct RequestGetDose {
    uint8_t index;
};
// length 10 bytes
struct RequestSetDose {
    uint8_t index;
    Dose value;
};
// length 1 bytes
struct RequestGetPinPump {
    uint8_t index;
};
// length 2 bytes
struct RequestSetPinPump {
    uint8_t index;
    uint8_t value;
};
// length 1 bytes
struct RequestGetPinFlowSensor {
    uint8_t index;
};
// length 2 bytes
struct RequestSetPinFlowSensor {
    uint8_t index;
    uint8_t value;
};
// length 1 bytes
struct RequestGetPinLevelSensor {
    uint8_t index;
};
// length 2 bytes
struct RequestSetPinLevelSensor {
    uint8_t index;
    uint8_t value;
};
// length 1 bytes
struct RequestGetPinMixer {
    uint8_t index;
};
// length 2 bytes
struct RequestSetPinMixer {
    uint8_t index;
    uint8_t value;
};
// length 1 bytes
struct RequestGetPinDose {
    uint8_t index;
};
// length 2 bytes
struct RequestSetPinDose {
    uint8_t index;
    uint8_t value;
};
// length 1 bytes
struct RequestGetPinDoseMixer {
    uint8_t index;
};
// length 2 bytes
struct RequestSetPinDoseMixer {
    uint8_t index;
    uint8_t value;
};
// length 1 bytes
struct RequestGetPinValve {
    uint8_t index;
};
// length 2 bytes
struct RequestSetPinValve {
    uint8_t index;
    uint8_t value;
};
// length 1 bytes
struct RequestGetTime {
    uint8_t fake;
};
// length 7 bytes
struct RequestSetTime {
    uint8_t second;
    uint8_t minute;
    uint8_t hour;
    uint8_t wday;
    uint8_t day;
    uint8_t month;
    uint8_t year;
};
// length 1 bytes
struct RequestGetTemp {
    uint8_t fake;
};
// length 1 bytes
struct RequestGetStatus {
    uint8_t fake;
};
// length 1 bytes
struct RequestGetStatePump {
    uint8_t index;
};
// length 2 bytes
struct RequestSetStatePump {
    uint8_t index;
    uint8_t value;
};
// length 1 bytes
struct RequestGetStateValve {
    uint8_t index;
};
// length 2 bytes
struct RequestSetStateValve {
    uint8_t index;
    uint8_t value;
};
// length 1 bytes
struct RequestGetStateMixer {
    uint8_t index;
};
// length 2 bytes
struct RequestSetStateMixer {
    uint8_t index;
    uint8_t value;
};
// length 1 bytes
struct RequestGetStateDose {
    uint8_t index;
};
// length 2 bytes
struct RequestSetStateDose {
    uint8_t index;
    uint8_t value;
};
// length 1 bytes
struct RequestGetStateDoseMixer {
    uint8_t index;
};
// length 2 bytes
struct RequestSetStateDoseMixer {
    uint8_t index;
    uint8_t value;
};
// length 1 bytes
struct RequestResetError {
    uint8_t fake;
};
union Request {
    RequestFertigate fertigate;
    RequestIrrigate irrigate;
    RequestWash wash;
    RequestPumpIn pumpIn;
    RequestCompote compote;
    RequestWashCompote washCompote;
    RequestMix mix;
    RequestMixDose mixDose;
    RequestDose dose;
    RequestGetProgram getProgram;
    RequestSetProgram setProgram;
    RequestGetCompoteDaily getCompoteDaily;
    RequestSetCompoteDaily setCompoteDaily;
    RequestGetSchedule getSchedule;
    RequestSetSchedule setSchedule;
    RequestGetTimer getTimer;
    RequestSetTimer setTimer;
    RequestGetPump getPump;
    RequestSetPump setPump;
    RequestGetMixer getMixer;
    RequestSetMixer setMixer;
    RequestGetDose getDose;
    RequestSetDose setDose;
    RequestGetPinPump getPinPump;
    RequestSetPinPump setPinPump;
    RequestGetPinFlowSensor getPinFlowSensor;
    RequestSetPinFlowSensor setPinFlowSensor;
    RequestGetPinLevelSensor getPinLevelSensor;
    RequestSetPinLevelSensor setPinLevelSensor;
    RequestGetPinMixer getPinMixer;
    RequestSetPinMixer setPinMixer;
    RequestGetPinDose getPinDose;
    RequestSetPinDose setPinDose;
    RequestGetPinDoseMixer getPinDoseMixer;
    RequestSetPinDoseMixer setPinDoseMixer;
    RequestGetPinValve getPinValve;
    RequestSetPinValve setPinValve;
    RequestGetTime getTime;
    RequestSetTime setTime;
    RequestGetTemp getTemp;
    RequestGetStatus getStatus;
    RequestGetStatePump getStatePump;
    RequestSetStatePump setStatePump;
    RequestGetStateValve getStateValve;
    RequestSetStateValve setStateValve;
    RequestGetStateMixer getStateMixer;
    RequestSetStateMixer setStateMixer;
    RequestGetStateDose getStateDose;
    RequestSetStateDose setStateDose;
    RequestGetStateDoseMixer getStateDoseMixer;
    RequestSetStateDoseMixer setStateDoseMixer;
    RequestResetError resetError;
};
inline uint16_t getRequestSize(uint8_t type) {
    if (type == REQUEST_FERTIGATE) return sizeof(RequestFertigate);
    if (type == REQUEST_IRRIGATE) return sizeof(RequestIrrigate);
    if (type == REQUEST_WASH) return sizeof(RequestWash);
    if (type == REQUEST_PUMP_IN) return sizeof(RequestPumpIn);
    if (type == REQUEST_COMPOTE) return sizeof(RequestCompote);
    if (type == REQUEST_WASH_COMPOTE) return sizeof(RequestWashCompote);
    if (type == REQUEST_MIX) return sizeof(RequestMix);
    if (type == REQUEST_MIX_DOSE) return sizeof(RequestMixDose);
    if (type == REQUEST_DOSE) return sizeof(RequestDose);
    if (type == REQUEST_GET_PROGRAM) return sizeof(RequestGetProgram);
    if (type == REQUEST_SET_PROGRAM) return sizeof(RequestSetProgram);
    if (type == REQUEST_GET_COMPOTE_DAILY) return sizeof(RequestGetCompoteDaily);
    if (type == REQUEST_SET_COMPOTE_DAILY) return sizeof(RequestSetCompoteDaily);
    if (type == REQUEST_GET_SCHEDULE) return sizeof(RequestGetSchedule);
    if (type == REQUEST_SET_SCHEDULE) return sizeof(RequestSetSchedule);
    if (type == REQUEST_GET_TIMER) return sizeof(RequestGetTimer);
    if (type == REQUEST_SET_TIMER) return sizeof(RequestSetTimer);
    if (type == REQUEST_GET_PUMP) return sizeof(RequestGetPump);
    if (type == REQUEST_SET_PUMP) return sizeof(RequestSetPump);
    if (type == REQUEST_GET_MIXER) return sizeof(RequestGetMixer);
    if (type == REQUEST_SET_MIXER) return sizeof(RequestSetMixer);
    if (type == REQUEST_GET_DOSE) return sizeof(RequestGetDose);
    if (type == REQUEST_SET_DOSE) return sizeof(RequestSetDose);
    if (type == REQUEST_GET_PIN_PUMP) return sizeof(RequestGetPinPump);
    if (type == REQUEST_SET_PIN_PUMP) return sizeof(RequestSetPinPump);
    if (type == REQUEST_GET_PIN_FLOW_SENSOR) return sizeof(RequestGetPinFlowSensor);
    if (type == REQUEST_SET_PIN_FLOW_SENSOR) return sizeof(RequestSetPinFlowSensor);
    if (type == REQUEST_GET_PIN_LEVEL_SENSOR) return sizeof(RequestGetPinLevelSensor);
    if (type == REQUEST_SET_PIN_LEVEL_SENSOR) return sizeof(RequestSetPinLevelSensor);
    if (type == REQUEST_GET_PIN_MIXER) return sizeof(RequestGetPinMixer);
    if (type == REQUEST_SET_PIN_MIXER) return sizeof(RequestSetPinMixer);
    if (type == REQUEST_GET_PIN_DOSE) return sizeof(RequestGetPinDose);
    if (type == REQUEST_SET_PIN_DOSE) return sizeof(RequestSetPinDose);
    if (type == REQUEST_GET_PIN_DOSE_MIXER) return sizeof(RequestGetPinDoseMixer);
    if (type == REQUEST_SET_PIN_DOSE_MIXER) return sizeof(RequestSetPinDoseMixer);
    if (type == REQUEST_GET_PIN_VALVE) return sizeof(RequestGetPinValve);
    if (type == REQUEST_SET_PIN_VALVE) return sizeof(RequestSetPinValve);
    if (type == REQUEST_GET_TIME) return sizeof(RequestGetTime);
    if (type == REQUEST_SET_TIME) return sizeof(RequestSetTime);
    if (type == REQUEST_GET_TEMP) return sizeof(RequestGetTemp);
    if (type == REQUEST_GET_STATUS) return sizeof(RequestGetStatus);
    if (type == REQUEST_GET_STATE_PUMP) return sizeof(RequestGetStatePump);
    if (type == REQUEST_SET_STATE_PUMP) return sizeof(RequestSetStatePump);
    if (type == REQUEST_GET_STATE_VALVE) return sizeof(RequestGetStateValve);
    if (type == REQUEST_SET_STATE_VALVE) return sizeof(RequestSetStateValve);
    if (type == REQUEST_GET_STATE_MIXER) return sizeof(RequestGetStateMixer);
    if (type == REQUEST_SET_STATE_MIXER) return sizeof(RequestSetStateMixer);
    if (type == REQUEST_GET_STATE_DOSE) return sizeof(RequestGetStateDose);
    if (type == REQUEST_SET_STATE_DOSE) return sizeof(RequestSetStateDose);
    if (type == REQUEST_GET_STATE_DOSE_MIXER) return sizeof(RequestGetStateDoseMixer);
    if (type == REQUEST_SET_STATE_DOSE_MIXER) return sizeof(RequestSetStateDoseMixer);
    if (type == REQUEST_RESET_ERROR) return sizeof(RequestResetError);
    return 0xFFFF;
};
